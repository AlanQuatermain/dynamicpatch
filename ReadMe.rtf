{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica;\f1\fswiss\fcharset77 Helvetica-Bold;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww11480\viewh11720\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\ql\qnatural\pardirnatural

\f0\fs24 \cf0 The project is split into a few different sections:\
\

\f1\b Atomic:
\f0\b0  Atomic CompareAndSwap routines for 32-bit integers (plus 64-bit on Intel), and a cache flush function, all implemented in assembler.\
\

\f1\b Bundles:
\f0\b0  Code used in loading & starting patch bundles. This is called by the injection entry code.\
\

\f1\b Examples:
\f0\b0  Not included in the main project; this folder contains separate projects used to test & verify the main framework.\
\

\f1\b Injection:
\f0\b0  Injector source code, along with precompiled code blocks; also includes the C and assembler source used to generate the code block arrays, although these files are not compiled by the project.\
\

\f1\b Lookup:
\f0\b0  Function lookup routines, similar to nlist(). There are Cocoa message implementation lookups, which will only function if objc.dylib is loaded, and standard lookups, which will look at the source framework *on disk* in order to implement cross-architecture searching (for Rosetta injection, Intel code searches for PowerPC addresses).\
\

\f1\b Patching:
\f0\b0  Code used to implement the patching algorithms themselves. Separate files for PowerPC, Intel, and Rosetta code, containing a certain amount of unabashed duplication. Also includes pre-compiled Rosetta stub code, and the (not compiled in project) PowerPC assembler source.\
\

\f1\b PublicHeaders:
\f0\b0  All the headers included in the 'Headers' folder of the finished framework.\
\

\f1\b Startup:
\f0\b0  The C-implemented functions called by the injected stubs; these are the entry points for the patch bundle loaders.\
\

\f1\b Utilities:
\f0\b0  Useful stuff used by the above; includes logging facilities, name for process ID lookup, and an IA-32 instruction stream parser, originally written by Elene Terry.}